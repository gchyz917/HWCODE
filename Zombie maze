#include<iostream>
#include<queue>
using namespace std;
char maps[301][301];
int n,m;
int enx,eny;
int bfs(int,int);
int x[4]={-1,1,0,0};
int y[4]={0,0,-1,1};
bool visit[301][301];
int step[301][301]={0};

int main() {
    cin>>n>>m;
    for(int i=0;i<n;i++) {
        for(int j=0;j<m;j++) {
            cin>>maps[i][j];
            visit[i][j]=false;
            if(maps[i][j]=='@') {
                enx=i;
                eny=j;
            }
        }
    }
    cout<<bfs(enx,eny);

    return 0;
}

int bfs(int i,int j) {
    queue<pair<int,int>> bfsq;
    bfsq.push({i,j});
    visit[i][j]=true;
    while(!bfsq.empty()) {
        auto [r,c]=bfsq.front();
        bfsq.pop();
        if(maps[r][c]=='=') {
            return step[r][c];
        }
        for(int a=0;a<4;a++) {
            int nx=r+x[a];
            int ny=c+y[a];
            if(nx>=0&&nx<n&&ny>=0&&ny<m) {
                if(maps[nx][ny]!='#') {
                    if(maps[nx][ny]>='A'&&maps[nx][ny]<='Z') {
                        for(int k=0;k<n;k++) {
                            for(int l=0;l<m;l++) {
                                if(maps[k][l]==maps[nx][ny]&&!visit[k][l]&&((k!=nx)||(l!=ny))) {
                                    visit[k][l]=true;
                                    step[k][l]=step[r][c]+1;
                                    bfsq.push({k,l});
                                }
                            }
                        }
                    }else {
                        if(!visit[nx][ny]) {
                            visit[nx][ny]=true;
                            step[nx][ny]=step[r][c]+1;
                            bfsq.push({nx,ny});
                        }
                    }
                }
            }
        }
    }
    return -1;
}
